pipeline {
    agent any // run on any agent
    tools {
        maven "mvn"
    }

    stages {
        stage('Git Checkout') {
            steps {
                notifyBuild('STARTED')
                git branch: 'prod', credentialsId: 'c12bc9a7-aa90-4822-9c84-77625cfaa039', url: 'https://github.com/JMR-Constraction/maven-web-app-project-jmr-con.git'
            }
        }

        stage('Maven Install') {
            steps {
                script {
                    try {
                        sh "mvn clean install"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    try {
                        sh "mvn sonar:sonar"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Nexus Deployment') {
            steps {
                script {
                    try {
                        sh "mvn deploy"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                sshagent(['pipeline-key']) {
                    script {
                        try {
                            sh "ssh ec2-user@13.233.198.189 'sudo /opt/tomcat/bin/shutdown.sh'"
                            sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@13.235.134.217:/opt/tomcat/webapps"
                            sh "ssh ec2-user@13.233.198.189 'sudo /opt/tomcat/bin/startup.sh'"
                        } catch (Exception e) {
                            currentBuild.result = 'FAILURE'
                            throw e
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            notifyBuild(currentBuild.result)
        }
        failure {
            notifyBuild(currentBuild.result)
        }
    }
}

// Custom notification function for Slack
def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESS'
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"
    
    // Set notification color based on build status
    if (buildStatus == 'STARTED') {
        colorCode = '#FFFF00' // Yellow for started
    } else if (buildStatus == 'SUCCESS') {
        colorCode = '#00FF00' // Green for success
    }

    // Send Slack notification
    try {
        slackSend(
            color: colorCode,
            message: summary,
            channel: '#ggg', // Make sure this channel exists in your Slack workspace
            teamDomain: 'your-team-domain', // If not configured globally, replace with your team's domain
            token: 'your-slack-api-token' // Optionally, provide a token here if needed
        )
    } catch (Exception e) {
        echo "Failed to send Slack notification: ${e.getMessage()}"
    }
}
